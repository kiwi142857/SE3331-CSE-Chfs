#include <algorithm>
#include <fstream>
#include <iostream>
#include <regex>
#include <string>
#include <vector>

#include "map_reduce/protocol.h"

namespace mapReduce
{
//
// The map function is called once for each file of input. The first
// argument is the name of the input file, and the second is the
// file's complete contents. You should ignore the input file name,
// and look only at the contents argument. The return value is a slice
// of key/value pairs.
//
std::vector<KeyVal> Map(const std::string &content)
{
    // Your code goes here
    // Hints: split contents into an array of words.
    std::unordered_map<std::string, int> word_count;
    std::regex word_regex("([a-zA-Z]+)");
    auto words_begin = std::sregex_iterator(content.begin(), content.end(), word_regex);
    auto words_end = std::sregex_iterator();

    for (std::sregex_iterator i = words_begin; i != words_end; ++i) {
        std::smatch match = *i;
        std::string word = match.str();
        word_count[word]++;
    }

    std::vector<KeyVal> ret;
    for (const auto &pair : word_count) {
        ret.emplace_back(pair.first, std::to_string(pair.second));
    }
    return ret;
}

//
// The reduce function is called once for each key generated by the
// map tasks, with a list of all the values created for that key by
// any map task.
//
std::string Reduce(const std::string &key, const std::vector<std::string> &values)
{
    // Your code goes here
    // Hints: return the number of occurrences of the word.
    int count = 0;
    for (const auto &value : values) {
        count += std::stoi(value);
    }
    return std::to_string(count);
}
} // namespace mapReduce